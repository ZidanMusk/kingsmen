#ifndef KINGSMEN_EVALUATE_H
#define KINGSMEN_EVALUATE_H

#include "Board.cpp"


class PawnHashTable {
public:
    PawnHashTable() {
        setSize(4);
    }

    void setSize(size_t sizeInMegaBytes) {
        // If size is not a power of two make it the biggest power of two smaller than size.
        if ((sizeInMegaBytes & (sizeInMegaBytes - 1)) != 0) {
            sizeInMegaBytes = static_cast<size_t>(1ull << (ull) (log2(sizeInMegaBytes)));
        }

        const auto tableSize = ((sizeInMegaBytes * 1024 * 1024) / sizeof(PawnHashTableEntry));
        Table.clear();
        Table.resize(tableSize);
        Table.shrink_to_fit();
    }

    void clear() {
        const auto tableSize = Table.size();
        Table.clear();
        Table.resize(tableSize);
    }

    void save(ull phk, int scoreOp, int scoreEd) {
        auto &hashEntry = Table[phk & (Table.size() - 1)];

        hashEntry.setData((scoreOp & 0xffff) | (scoreEd << 16));
        hashEntry.setHash(phk ^ hashEntry.getData());

        assert(hashEntry.getScoreOp() == scoreOp);
        assert(hashEntry.getScoreEd() == scoreEd);
    }

    bool probe(ull phk, int &scoreOp, int &scoreEd) const {
        const auto &hashEntry = Table[phk & (Table.size() - 1)];

        if ((hashEntry.getHash() ^ hashEntry.getData()) == phk) {
            scoreOp = hashEntry.getScoreOp();
            scoreEd = hashEntry.getScoreEd();
            return true;
        }

        return false;
    }

private:
    class PawnHashTableEntry {
    public:
        PawnHashTableEntry() noexcept : Hash(0), Data(0) {
        }

        void setHash(uint64_t newHash) noexcept {
            Hash = newHash;
        }

        void setData(uint64_t newData) noexcept {
            Data = newData;
        }

        uint64_t getHash() const noexcept {
            return Hash;
        }

        uint64_t getData() const noexcept {
            return Data;
        }

        int16_t getScoreOp() const noexcept {
            return static_cast<int16_t>(Data);
        }

        int16_t getScoreEd() const noexcept {
            return static_cast<int16_t>(Data >> 16);
        }

    private:
        uint64_t Hash;
        uint64_t Data;
    };

    std::vector<PawnHashTableEntry> Table;
};

class Evaluate {

    Board *_board;
    PawnHashTable pht;


    ull Rays[8][64] = {
            {0,0,0,0,0,0,0,0,0,1,2,4,8,16,32,64,0,256,513,1026,2052,4104,8208,16416,0,65536,131328,262657,525314,1050628,2101256,4202512,0,16777216,33619968,67240192,134480385,268960770,537921540,1075843080,0,4294967296,8606711808,17213489152,34426978560,68853957121,137707914242,275415828484,0,1099511627776,2203318222848,4406653222912,8813306511360,17626613022976,35253226045953,70506452091906,0,281474976710656,564049465049088,1128103225065472,2256206466908160,4512412933881856,9024825867763968,18049651735527937},
            {0,0,0,0,0,0,0,0,1,2,4,8,16,32,64,128,257,514,1028,2056,4112,8224,16448,32896,65793,131586,263172,526344,1052688,2105376,4210752,8421504,16843009,33686018,67372036,134744072,269488144,538976288,1077952576,2155905152,4311810305,8623620610,17247241220,34494482440,68988964880,137977929760,275955859520,551911719040,1103823438081,2207646876162,4415293752324,8830587504648,17661175009296,35322350018592,70644700037184,141289400074368,282578800148737,565157600297474,1130315200594948,2260630401189896,4521260802379792,9042521604759584,18085043209519168,36170086419038336},
            {0,0,0,0,0,0,0,0,2,4,8,16,32,64,128,0,516,1032,2064,4128,8256,16512,32768,0,132104,264208,528416,1056832,2113664,4227072,8388608,0,33818640,67637280,135274560,270549120,541097984,1082130432,2147483648,0,8657571872,17315143744,34630287488,69260574720,138521083904,277025390592,549755813888,0,2216338399296,4432676798592,8865353596928,17730707128320,35461397479424,70918499991552,140737488355328,0,567382630219904,1134765260439552,2269530520813568,4539061024849920,9078117754732544,18155135997837312,36028797018963968,0},
            {0,1,3,7,15,31,63,127,0,256,768,1792,3840,7936,16128,32512,0,65536,196608,458752,983040,2031616,4128768,8323072,0,16777216,50331648,117440512,251658240,520093696,1056964608,2130706432,0,4294967296,12884901888,30064771072,64424509440,133143986176,270582939648,545460846592,0,1099511627776,3298534883328,7696581394432,16492674416640,34084860461056,69269232549888,139637976727552,0,281474976710656,844424930131968,1970324836974592,4222124650659840,8725724278030336,17732923532771328,35747322042253312,0,72057594037927936,216172782113783808,504403158265495552,1080863910568919040,2233785415175766016,4539628424389459968,9151314442816847872},
            {254,252,248,240,224,192,128,0,65024,64512,63488,61440,57344,49152,32768,0,16646144,16515072,16252928,15728640,14680064,12582912,8388608,0,4261412864,4227858432,4160749568,4026531840,3758096384,3221225472,2147483648,0,1090921693184,1082331758592,1065151889408,1030792151040,962072674304,824633720832,549755813888,0,279275953455104,277076930199552,272678883688448,263882790666240,246290604621824,211106232532992,140737488355328,0,71494644084506624,70931694131085312,69805794224242688,67553994410557440,63050394783186944,54043195528445952,36028797018963968,0,18302628885633695744,18158513697557839872,17870283321406128128,17293822569102704640,16140901064495857664,13835058055282163712,9223372036854775808,0},
            {},
            {72340172838076672,144680345676153344,289360691352306688,578721382704613376,1157442765409226752,2314885530818453504,4629771061636907008,9259542123273814016,72340172838076416,144680345676152832,289360691352305664,578721382704611328,1157442765409222656,2314885530818445312,4629771061636890624,9259542123273781248,72340172838010880,144680345676021760,289360691352043520,578721382704087040,1157442765408174080,2314885530816348160,4629771061632696320,9259542123265392640,72340172821233664,144680345642467328,289360691284934656,578721382569869312,1157442765139738624,2314885530279477248,4629771060558954496,9259542121117908992,72340168526266368,144680337052532736,289360674105065472,578721348210130944,1157442696420261888,2314885392840523776,4629770785681047552,9259541571362095104,72339069014638592,144678138029277184,289356276058554368,578712552117108736,1157425104234217472,2314850208468434944,4629700416936869888,9259400833873739776,72057594037927936,144115188075855872,288230376151711744,576460752303423488,1152921504606846976,2305843009213693952,4611686018427387904,9223372036854775808,0,0,0,0,0,0,0,0},
            {},
    };
//================================================================================
    ull Passed[2][64] = {
            {},
            {0,0,0,0,0,0,0,0,3,7,14,28,56,112,224,192,771,1799,3598,7196,14392,28784,57568,49344,197379,460551,921102,1842204,3684408,7368816,14737632,12632256,50529027,117901063,235802126,471604252,943208504,1886417008,3772834016,3233857728,12935430915,30182672135,60365344270,120730688540,241461377080,482922754160,965845508320,827867578560,3311470314243,7726764066567,15453528133134,30907056266268,61814112532536,123628225065072,247256450130144,211934100111552,847736400446211,1978051601041159,3956103202082318,7912206404164636,15824412808329272,31648825616658544,63297651233317088,0},
    };
//================================================================================
    ull Backward[2][64] = {
            {0,5,10,20,40,80,160,64,514,1285,2570,5140,10280,20560,41120,16448,131586,328965,657930,1315860,2631720,5263440,10526880,4210752,33686018,84215045,168430090,336860180,673720360,1347440720,2694881440,1077952576,8623620610,21559051525,43118103050,86236206100,172472412200,344944824400,689889648800,275955859520,2207646876162,5519117190405,11038234380810,22076468761620,44152937523240,88305875046480,176611750092960,70644700037184,565157600297474,1412894000743685,2825788001487370,5651576002974740,11303152005949480,22606304011898960,45212608023797920,18085043209519168,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,144680345676153344,361700864190383360,723401728380766720,1446803456761533440,2893606913523066880,5787213827046133760,11574427654092267520,4629771061636907008,144680345676152832,361700864190382080,723401728380764160,1446803456761528320,2893606913523056640,5787213827046113280,11574427654092226560,4629771061636890624,144680345676021760,361700864190054400,723401728380108800,1446803456760217600,2893606913520435200,5787213827040870400,11574427654081740800,4629771061632696320,144680345642467328,361700864106168320,723401728212336640,1446803456424673280,2893606912849346560,5787213825698693120,11574427651397386240,4629771060558954496,144680337052532736,361700842631331840,723401685262663680,1446803370525327360,2893606741050654720,5787213482101309440,11574426964202618880,4629770785681047552,144678138029277184,361695345073192960,723390690146385920,1446781380292771840,2893562760585543680,5787125521171087360,11574251042342174720,4629700416936869888,144115188075855872,360287970189639680,720575940379279360,1441151880758558720,2882303761517117440,5764607523034234880,11529215046068469760,0},
    };
//================================================================================
    ull PawnAttacks[2][64] = {
            {512,1280,2560,5120,10240,20480,40960,16384,131072,327680,655360,1310720,2621440,5242880,10485760,4194304,33554432,83886080,167772160,335544320,671088640,1342177280,2684354560,1073741824,8589934592,21474836480,42949672960,85899345920,171798691840,343597383680,687194767360,274877906944,2199023255552,5497558138880,10995116277760,21990232555520,43980465111040,87960930222080,175921860444160,70368744177664,562949953421312,1407374883553280,2814749767106560,5629499534213120,11258999068426240,22517998136852480,45035996273704960,18014398509481984,144115188075855872,360287970189639680,720575940379279360,1441151880758558720,2882303761517117440,5764607523034234880,11529215046068469760,4611686018427387904,0,0,0,0,0,0,0,0},
            {0,0,0,0,0,0,0,0,2,5,10,20,40,80,160,64,512,1280,2560,5120,10240,20480,40960,16384,131072,327680,655360,1310720,2621440,5242880,10485760,4194304,33554432,83886080,167772160,335544320,671088640,1342177280,2684354560,1073741824,8589934592,21474836480,42949672960,85899345920,171798691840,343597383680,687194767360,274877906944,2199023255552,5497558138880,10995116277760,21990232555520,43980465111040,87960930222080,175921860444160,70368744177664,562949953421312,1407374883553280,2814749767106560,5629499534213120,11258999068426240,22517998136852480,45035996273704960,18014398509481984},
    };
//================================================================================
    ull Isolated[64] = {
};


    int passedBonusOpening[8] = {
            0, 4, -19, -8, 19, 48, 58, 0
    };

    int passedBonusEnding[8] = {
            0, 4, 17, 32, 51, 67, 90, 0
    };
    int isolatedPenaltyOpening[8] = {
            1, 5, 14, 13, 22, 14, 14, 20
    };

    int isolatedPenaltyEnding[8] = {
            5, 13, 21, 26, 22, 16, 10, 6
    };
    int backwardPenaltyOpening[8] = {
            -4, 3, 2, 21, 8, 7, 13, -1
    };

    int backwardPenaltyEnding[8] = {
            2, 7, 13, 14, 7, 1, 1, 3
    };
    int doubledPenaltyOpening[8] = {
            36, 9, 2, 23, 18, 20, 0, 26
    };

    int doubledPenaltyEnding[8] = {
            46, 25, 31, 24, 21, 19, 29, 44
    };
    ull openFilePenalty[8] = {
            6, 5, 4, 4, 4, 4, 5, 6
    };
    ull halfopenFilePenalty[8] = {
            5, 4, 3, 3, 3, 3, 4, 5
    };
    ull pawnStormPenalty[8] = {
            0, 0, 0, 1, 2, 3, 0, 0
    };
    ull piecePhase[6] = {
            0, 3, 3, 5, 10, 0
    };
    ull files[8] = {
            0x0101010101010101,
            0x0202020202020202,
            0x0404040404040404,
            0x0808080808080808,
            0x1010101010101010,
            0x2020202020202020,
            0x4040404040404040,
            0x8080808080808080
    };
    ull ranks[8] = {
            0x00000000000000FF,
            0x000000000000FF00,
            0x0000000000FF0000,
            0x00000000FF000000,
            0x000000FF00000000,
            0x0000FF0000000000,
            0x00FF000000000000,
            0xFF00000000000000
    };
    int kingSafetyTable[100] = {
            21, 7, 11, 7, 7, 9, 5, 7, 10, 14, 15, 20, 19, 20, 25, 22, 28, 40, 45, 47, 46, 60, 56, 82, 86, 102, 98,
            109, 107, 117, 125, 132, 159, 168, 181, 188, 211, 213, 234, 216, 265, 276, 288, 272, 308, 339, 351, 355,
            374, 354, 370, 412, 420, 481, 439, 457, 478, 478, 441, 509, 494, 431, 517, 569, 562, 499, 500, 531, 523,
            500, 500, 500, 522, 517, 500, 500, 500, 508, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500,
            500, 500, 500, 500, 500, 500, 500, 500, 500, 500
    };
    const std::array<std::vector<int>, 6> mobilityOpening = {{
                                                                     {},
                                                                     {-1, 6, 12, 16, 17, 16, 16, 15, 18},
                                                                     {-12, -7, -2, 1, 6, 14, 17, 22, 19, 23, 21, 34, 34,
                                                                             29},
                                                                     {-15, -12, -5, -3, -4, -1, 0, 6, 3, 1, 4, 4, 7, 14,
                                                                             20},
                                                                     {35, -5, -8, -8, -6, -4, -6, -3, 1, -1, 5, 7, 6, 6, 8,
                                                                             4, 2, 6, 4, 7, 17, 21, 30, 24, 41, 41, 36, 34},
                                                                     {}
                                                             }};

    const std::array<std::vector<int>, 6> mobilityEnding = {{
                                                                    {},
                                                                    {-30, 1, 4, 11, 16, 25, 23, 23, 19},
                                                                    {-22, -32, -19, -6, 5, 20, 29, 33, 42, 40, 36, 38, 28, 13},
                                                                    {-12, -12, -8, -5, 7, 16, 20, 22, 31, 42, 43, 47, 47, 47, 37},
                                                                    {-2, 5, -2, -23, -28, -29, -14, -12, -10, -3, -5, -1, 6, 14, 17, 22, 36, 34, 43, 37, 39, 33, 36, 22, 12, -4, 38, 26},
                                                                    {}
                                                            }};
    const int attackWeight[6] = {
            0, 2, 2, 3, 5, 0
    };



public:
    Evaluate(Board *b);

    long double xx = 0;
    long double xxx = 0;

    int pawnStructure(int phase);

    int kingSafty(int blackKingSafety, int whiteKingSafty, int phase); // arguments are calculated in mobility
    int interpolateScore(int scoreOp, int scoreEd, int phase);

    int mobilityEval(std::array<int, 2> &kingSafetyScore, int phase);

    int evaluate(bool verbose = false);

};

#endif //KINGSMEN_EVALUATE_H
